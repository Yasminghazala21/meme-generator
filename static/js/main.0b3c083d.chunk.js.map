{"version":3,"sources":["components/MemeGenerator/styledComponents.js","components/MemeGenerator/index.js","App.js","index.js"],"names":["MemeGeneratorBgContainer","styled","div","withConfig","displayName","componentId","Heading","h1","MemeGeneratorBottomConatiner","MemeGeneratorContentConatiner","form","InputLabelContainer","LabelTitle","label","commonStyles","css","InputElement","input","FontDropdownMenu","select","DropDownOptions","option","GenerateButton","button","MemeBgMainContainer","props","imageProp","MemeContent","p","changeFontSize","fontSizesOptionsList","optionId","displayText","MemeGenerator","_Component","_this","_classCallCheck","_len","arguments","length","args","Array","_key","_callSuper","concat","state","imageUrlValue","topTextValue","bottomTextValue","isMemeGenerated","memeData","imageUrl","topText","bottomText","fontSize","changeImageUrlValue","event","setState","target","value","changeTopTextValue","changeBottomTextValue","changeFontValue","activeFontSizeValue","createMemeContent","preventDefault","_this$state","imageLinkInputContainer","_jsxs","children","_jsx","htmlFor","type","id","onChange","placeholder","topTextInputcontainer","bottomTextInputContainer","fontSelectionInputContainer","map","eachFontSize","memeBgContainer","_inherits","_createClass","key","this","onClick","Component","App","ReactDOM","render","React","StrictMode","document","getElementById"],"mappings":"6NAGaA,EAA2BC,IAAOC,IAAGC,WAAA,CAAAC,YAAA,2BAAAC,YAAA,gBAAVJ,CAAU,oCAKrCK,EAAUL,IAAOM,GAAEJ,WAAA,CAAAC,YAAA,UAAAC,YAAA,gBAATJ,CAAS,kHASnBO,EAA+BP,IAAOC,IAAGC,WAAA,CAAAC,YAAA,+BAAAC,YAAA,gBAAVJ,CAAU,iMAYzCQ,EAAgCR,IAAOS,KAAIP,WAAA,CAAAC,YAAA,gCAAAC,YAAA,gBAAXJ,CAAW,yGAQ3CU,EAAsBV,IAAOC,IAAGC,WAAA,CAAAC,YAAA,sBAAAC,YAAA,gBAAVJ,CAAU,uEAOhCW,EAAaX,IAAOY,MAAKV,WAAA,CAAAC,YAAA,aAAAC,YAAA,gBAAZJ,CAAY,8DAMhCa,EAAeC,YAAG,wKAYXC,EAAef,IAAOgB,MAAKd,WAAA,CAAAC,YAAA,eAAAC,YAAA,gBAAZJ,CAAY,QACpCa,GAGSI,EAAmBjB,IAAOkB,OAAMhB,WAAA,CAAAC,YAAA,mBAAAC,YAAA,gBAAbJ,CAAa,QACzCa,GAGSM,EAAkBnB,IAAOoB,OAAMlB,WAAA,CAAAC,YAAA,kBAAAC,YAAA,gBAAbJ,CAAa,MAE/BqB,EAAiBrB,IAAOsB,OAAMpB,WAAA,CAAAC,YAAA,iBAAAC,YAAA,gBAAbJ,CAAa,sHAU9BuB,EAAsBvB,IAAOC,IAAGC,WAAA,CAAAC,YAAA,sBAAAC,YAAA,iBAAVJ,CAAU,+RAGnB,SAAAwB,GAAK,OAAIA,EAAMC,SAAS,IAgBrCC,EAAc1B,IAAO2B,EAACzB,WAAA,CAAAC,YAAA,cAAAC,YAAA,iBAARJ,CAAQ,4DAGpB,SAAAwB,GAAK,OAAIA,EAAMI,cAAc,I,OCvFtCC,EAAuB,CAC3B,CACEC,SAAU,IACVC,YAAa,KAEf,CACED,SAAU,KACVC,YAAa,MAEf,CACED,SAAU,KACVC,YAAa,MAEf,CACED,SAAU,KACVC,YAAa,MAEf,CACED,SAAU,KACVC,YAAa,MAEf,CACED,SAAU,KACVC,YAAa,MAEf,CACED,SAAU,KACVC,YAAa,OAKXC,EAAa,SAAAC,GAAA,SAAAD,IAAA,IAAAE,EAAAC,YAAA,KAAAH,GAAA,QAAAI,EAAAC,UAAAC,OAAAC,EAAA,IAAAC,MAAAJ,GAAAK,EAAA,EAAAA,EAAAL,EAAAK,IAAAF,EAAAE,GAAAJ,UAAAI,GAqIhB,OArIgBP,EAAAQ,YAAA,KAAAV,EAAA,GAAAW,OAAAJ,KACjBK,MAAQ,CACNC,cAAe,GACfC,aAAc,GACdC,gBAAiB,GACjBC,iBAAiB,EACjBC,SAAU,CACRC,SAAU,GACVC,QAAS,GACTC,WAAY,GACZC,SAAUxB,EAAqB,GAAGC,WAErCI,EAEDoB,oBAAsB,SAAAC,GACpBrB,EAAKsB,SAAS,CAACX,cAAeU,EAAME,OAAOC,OAC7C,EAACxB,EAEDyB,mBAAqB,SAAAJ,GACnBrB,EAAKsB,SAAS,CAACV,aAAcS,EAAME,OAAOC,OAC5C,EAACxB,EAED0B,sBAAwB,SAAAL,GACtBrB,EAAKsB,SAAS,CAACT,gBAAiBQ,EAAME,OAAOC,OAC/C,EAACxB,EAED2B,gBAAkB,SAAAN,GAChBrB,EAAKsB,SAAS,CAACM,oBAAqBP,EAAME,OAAOC,OACnD,EAACxB,EAED6B,kBAAoB,SAAAR,GAClBA,EAAMS,iBACN,IAAAC,EAKI/B,EAAKU,MAJPC,EAAaoB,EAAbpB,cACAC,EAAYmB,EAAZnB,aACAC,EAAekB,EAAflB,gBACAe,EAAmBG,EAAnBH,oBAGF5B,EAAKsB,SAAS,CACZR,iBAAiB,EACjBC,SAAU,CACRC,SAAUL,EACVM,QAASL,EACTM,WAAYL,EACZM,SAAUS,IAGhB,EAAC5B,EAEDgC,wBAA0B,WACxB,IAAOrB,EAAiBX,EAAKU,MAAtBC,cACP,OACEsB,eAACzD,EAAmB,CAAA0D,SAAA,CAClBC,cAAC1D,EAAU,CAAC2D,QAAQ,WAAUF,SAAC,cAC/BC,cAACtD,EAAY,CACXwD,KAAK,OACLC,GAAG,WACHd,MAAOb,EACP4B,SAAUvC,EAAKoB,oBACfoB,YAAY,0BAIpB,EAACxC,EAEDyC,sBAAwB,WACtB,IAAO7B,EAAgBZ,EAAKU,MAArBE,aACP,OACEqB,eAACzD,EAAmB,CAAA0D,SAAA,CAClBC,cAAC1D,EAAU,CAAC2D,QAAQ,UAASF,SAAC,aAC9BC,cAACtD,EAAY,CACXwD,KAAK,OACLC,GAAG,UACHd,MAAOZ,EACP2B,SAAUvC,EAAKyB,mBACfe,YAAY,yBAIpB,EAACxC,EAED0C,yBAA2B,WACzB,IAAO7B,EAAmBb,EAAKU,MAAxBG,gBACP,OACEoB,eAACzD,EAAmB,CAAA0D,SAAA,CAClBC,cAAC1D,EAAU,CAAC2D,QAAQ,aAAYF,SAAC,gBACjCC,cAACtD,EAAY,CACXwD,KAAK,OACLC,GAAG,aACHd,MAAOX,EACP0B,SAAUvC,EAAK0B,sBACfc,YAAY,4BAIpB,EAACxC,EAED2C,4BAA8B,WAC5B,IAAOf,EAAuB5B,EAAKU,MAA5BkB,oBACP,OACEK,eAACzD,EAAmB,CAAA0D,SAAA,CAClBC,cAAC1D,EAAU,CAAC2D,QAAQ,aAAYF,SAAC,cACjCC,cAACpD,EAAgB,CACfyC,MAAOI,EACPW,SAAUvC,EAAK2B,gBAAgBO,SAE9BvC,EAAqBiD,KAAI,SAAAC,GAAY,OACpCV,cAAClD,EAAe,CAEduC,MAAOqB,EAAajD,SAASsC,SAE5BW,EAAahD,aAHTgD,EAAajD,SAIF,QAK5B,EAACI,EAED8C,gBAAkB,WAChB,IAAO/B,EAAYf,EAAKU,MAAjBK,SAEP,OAAOA,EACLkB,eAAC5C,EAAmB,CAAC,cAAY,OAAOE,UAAWwB,EAASC,SAASkB,SAAA,CACnEC,cAAC3C,EAAW,CAACE,eAAgBqB,EAASI,SAASe,SAC5CnB,EAASE,UAEZkB,cAAC3C,EAAW,CAACE,eAAgBqB,EAASI,SAASe,SAC5CnB,EAASG,gBAGZ,IACN,EAAClB,CAAA,QAAA+C,YAAAjD,EAAAC,GAAAiD,YAAAlD,EAAA,EAAAmD,IAAA,SAAAzB,MAED,WACE,IAAOV,EAAmBoC,KAAKxC,MAAxBI,gBACP,OACEmB,eAACpE,EAAwB,CAAAqE,SAAA,CACvBC,cAAChE,EAAO,CAAA+D,SAAC,mBACTD,eAAC5D,EAA4B,CAAA6D,SAAA,CAC3BD,eAAC3D,EAA6B,CAAA4D,SAAA,CAC3BgB,KAAKlB,0BACLkB,KAAKT,wBACLS,KAAKR,2BACLQ,KAAKP,8BACNR,cAAChD,EAAc,CAACkD,KAAK,SAASc,QAASD,KAAKrB,kBAAkBK,SAAC,gBAIhEpB,GAAmBoC,KAAKJ,uBAIjC,IAAC,CA1JgB,CAASM,aA6JbtD,ICxMAuD,G,MAFH,WAAH,OAASlB,cAACrC,EAAa,GAAG,GCAnCwD,IAASC,OACPpB,cAACqB,IAAMC,WAAU,CAAAvB,SACfC,cAACkB,EAAG,MAENK,SAASC,eAAe,Q","file":"static/js/main.0b3c083d.chunk.js","sourcesContent":["// Style your components here\nimport styled, {css} from 'styled-components'\n\nexport const MemeGeneratorBgContainer = styled.div`\n  min-height: 100vh;\n  padding: 50px;\n`\n\nexport const Heading = styled.h1`\n  color: #35469c;\n  font-family: 'Open Sans';\n  @media screen and (max-width: 767px) {\n    text-align: center;\n    font-size: 25px;\n  }\n`\n\nexport const MemeGeneratorBottomConatiner = styled.div`\n  display: flex;\n  flex-direction: row;\n  justify-content: flex-start;\n  align-items: center;\n  @media screen and (max-width: 767px) {\n    flex-direction: column-reverse;\n    justify-content: center;\n    align-items: center;\n  }\n`\n\nexport const MemeGeneratorContentConatiner = styled.form`\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: flex-start;\n  margin-right: 30px;\n`\n\nexport const InputLabelContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  margin-bottom: 20px;\n  width: 100%;\n`\n\nexport const LabelTitle = styled.label`\n  font-family: 'Open Sans';\n  color: #7e858e;\n  margin-bottom: 5px;\n`\n\nconst commonStyles = css`\n  border: 1px solid #d7dfe9;\n  padding: 10px;\n  color: #5a7184;\n  outline: none;\n  cursor: pointer;\n  background-color: #ffffff;\n  margin-top: 5px;\n  border-radius: 5px;\n  font-family: 'Open Sans';\n`\n\nexport const InputElement = styled.input`\n  ${commonStyles}\n`\n\nexport const FontDropdownMenu = styled.select`\n  ${commonStyles}\n`\n\nexport const DropDownOptions = styled.option``\n\nexport const GenerateButton = styled.button`\n  color: #ffffff;\n  background-color: #0b69ff;\n  padding: 10px;\n  border-radius: 5px;\n  width: 100px;\n  border-width: 0;\n  cursor: pointer;\n`\n\nexport const MemeBgMainContainer = styled.div`\n  margin-left: 30px;\n  padding: 20px;\n  background-image: url(${props => props.imageProp});\n  background-size: cover;\n  display: flex;\n  flex-direction: column;\n  justify-content: space-between;\n  align-items: center;\n  width: 900px;\n  height: 400px;\n  @media screen and (max-width: 767px) {\n    width: 100%;\n    height: 200px;\n    margin-left: 0;\n    margin-bottom: 30px;\n  }\n`\n\nexport const MemeContent = styled.p`\n  font-family: 'Open Sans';\n  color: #ffffff;\n  font-size: ${props => props.changeFontSize}px;\n`\n","import {Component} from 'react'\n\nimport {\n  MemeGeneratorBgContainer,\n  MemeGeneratorBottomConatiner,\n  MemeGeneratorContentConatiner,\n  Heading,\n  InputLabelContainer,\n  LabelTitle,\n  InputElement,\n  FontDropdownMenu,\n  DropDownOptions,\n  GenerateButton,\n  MemeBgMainContainer,\n  MemeContent,\n} from './styledComponents'\n\nconst fontSizesOptionsList = [\n  {\n    optionId: '8',\n    displayText: '8',\n  },\n  {\n    optionId: '12',\n    displayText: '12',\n  },\n  {\n    optionId: '16',\n    displayText: '16',\n  },\n  {\n    optionId: '20',\n    displayText: '20',\n  },\n  {\n    optionId: '24',\n    displayText: '24',\n  },\n  {\n    optionId: '28',\n    displayText: '28',\n  },\n  {\n    optionId: '32',\n    displayText: '32',\n  },\n]\n\n// Write your code here\nclass MemeGenerator extends Component {\n  state = {\n    imageUrlValue: '',\n    topTextValue: '',\n    bottomTextValue: '',\n    isMemeGenerated: false,\n    memeData: {\n      imageUrl: '',\n      topText: '',\n      bottomText: '',\n      fontSize: fontSizesOptionsList[0].optionId,\n    },\n  }\n\n  changeImageUrlValue = event => {\n    this.setState({imageUrlValue: event.target.value})\n  }\n\n  changeTopTextValue = event => {\n    this.setState({topTextValue: event.target.value})\n  }\n\n  changeBottomTextValue = event => {\n    this.setState({bottomTextValue: event.target.value})\n  }\n\n  changeFontValue = event => {\n    this.setState({activeFontSizeValue: event.target.value})\n  }\n\n  createMemeContent = event => {\n    event.preventDefault()\n    const {\n      imageUrlValue,\n      topTextValue,\n      bottomTextValue,\n      activeFontSizeValue\n    } = this.state\n\n    this.setState({\n      isMemeGenerated: true,\n      memeData: {\n        imageUrl: imageUrlValue,\n        topText: topTextValue,\n        bottomText: bottomTextValue,\n        fontSize: activeFontSizeValue,\n      },\n    })\n  }\n\n  imageLinkInputContainer = () => {\n    const {imageUrlValue} = this.state\n    return (\n      <InputLabelContainer>\n        <LabelTitle htmlFor=\"imageUrl\">Image URL</LabelTitle>\n        <InputElement\n          type=\"text\"\n          id=\"imageUrl\"\n          value={imageUrlValue}\n          onChange={this.changeImageUrlValue}\n          placeholder=\"Enter the Image URL\"\n        />\n      </InputLabelContainer>\n    )\n  }\n\n  topTextInputcontainer = () => {\n    const {topTextValue} = this.state\n    return (\n      <InputLabelContainer>\n        <LabelTitle htmlFor=\"topText\">Top Text</LabelTitle>\n        <InputElement\n          type=\"text\"\n          id=\"topText\"\n          value={topTextValue}\n          onChange={this.changeTopTextValue}\n          placeholder=\"Enter the Top Text\"\n        />\n      </InputLabelContainer>\n    )\n  }\n\n  bottomTextInputContainer = () => {\n    const {bottomTextValue} = this.state\n    return (\n      <InputLabelContainer>\n        <LabelTitle htmlFor=\"bottomText\">Bottom Text</LabelTitle>\n        <InputElement\n          type=\"text\"\n          id=\"bottomText\"\n          value={bottomTextValue}\n          onChange={this.changeBottomTextValue}\n          placeholder=\"Enter the Bottom Text\"\n        />\n      </InputLabelContainer>\n    )\n  }\n\n  fontSelectionInputContainer = () => {\n    const {activeFontSizeValue} = this.state\n    return (\n      <InputLabelContainer>\n        <LabelTitle htmlFor=\"bottomText\">Font Size</LabelTitle>\n        <FontDropdownMenu\n          value={activeFontSizeValue}\n          onChange={this.changeFontValue}\n        >\n          {fontSizesOptionsList.map(eachFontSize => (\n            <DropDownOptions\n              key={eachFontSize.optionId}\n              value={eachFontSize.optionId}\n            >\n              {eachFontSize.displayText}\n            </DropDownOptions>\n          ))}\n        </FontDropdownMenu>\n      </InputLabelContainer>\n    )\n  }\n\n  memeBgContainer = () => {\n    const {memeData} = this.state\n\n    return memeData ? (\n      <MemeBgMainContainer data-testid=\"meme\" imageProp={memeData.imageUrl}>\n        <MemeContent changeFontSize={memeData.fontSize}>\n          {memeData.topText}\n        </MemeContent>\n        <MemeContent changeFontSize={memeData.fontSize}>\n          {memeData.bottomText}\n        </MemeContent>\n      </MemeBgMainContainer>\n    ) : null\n  }\n\n  render() {\n    const {isMemeGenerated} = this.state\n    return (\n      <MemeGeneratorBgContainer>\n        <Heading>Meme Generator</Heading>\n        <MemeGeneratorBottomConatiner>\n          <MemeGeneratorContentConatiner>\n            {this.imageLinkInputContainer()}\n            {this.topTextInputcontainer()}\n            {this.bottomTextInputContainer()}\n            {this.fontSelectionInputContainer()}\n            <GenerateButton type=\"button\" onClick={this.createMemeContent}>\n              Generate\n            </GenerateButton>\n          </MemeGeneratorContentConatiner>\n          {isMemeGenerated && this.memeBgContainer()}\n        </MemeGeneratorBottomConatiner>\n      </MemeGeneratorBgContainer>\n    )\n  }\n}\n\nexport default MemeGenerator\n","import MemeGenerator from './components/MemeGenerator'\n\nimport './App.css'\n\nconst App = () => <MemeGenerator />\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n"],"sourceRoot":""}